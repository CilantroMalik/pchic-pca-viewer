{"version":3,"sources":["features/assetChooser/assetSlice.js","features/infoModal/infoSlice.js","features/assetChooser/AssetChooser.js","features/plotViewer/PlotViewer.js","App.js","app/store.js","index.js"],"names":["assetSlice","createSlice","name","initialState","reducers","setZscores","state","action","zscores","payload","setComponents","components","setAssetType","assetType","setGene","gene","actions","infoSlice","setVisible","visible","AssetChooser","options","useSelector","assets","useState","geneSelected","setGeneSelected","dimmed","setDimmed","dispatch","useDispatch","allowedGenes","componentButtons","map","compType","className","onClick","onCompTypeClicked","style","margin","padding","nanoid","plotButtons","plotType","onPlotTypeClicked","width","marginTop","marginLeft","borderLeft","disabled","opacity","borderColor","backgroundColor","marginRight","color","flexBasis","placeholder","type","onChange","e","target","value","includes","PlotViewer","geneTableRows","i","row","slice","geneName","fontSize","textAlign","push","path","height","borderRadius","src","process","alt","display","flexDirection","justifyContent","App","info","transition","filter","position","top","left","marginBottom","store","configureStore","reducer","assetReducer","infoReducer","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.48a0a8bd.chunk.js","sourcesContent":["import { createSlice } from '@reduxjs/toolkit';\n\nconst initialState = {\"gene\": \"IL7R\", \"assetType\": \"All Cell Types\", \"components\": \"PC1 and PC2\", \"zscores\": false}\n\nconst assetSlice = createSlice({\n    name: 'assets',\n    initialState,\n    reducers: {\n        setZscores(state, action) { state.zscores = action.payload },\n        setComponents(state, action) { state.components = action.payload },\n        setAssetType(state, action) { state.assetType = action.payload },\n        setGene(state, action) { state.gene = action.payload }\n    }\n})\n\nexport const { setZscores, setComponents, setAssetType, setGene } = assetSlice.actions\n\nexport default assetSlice.reducer","import { createSlice } from '@reduxjs/toolkit';\n\nconst initialState = {\"visible\": false}\n\nconst infoSlice = createSlice({\n    name: \"info\",\n    initialState,\n    reducers: {\n        setVisible(state, action) { state.visible = action.payload }\n    }\n})\n\nexport const { setVisible } = infoSlice.actions\n\nexport default infoSlice.reducer","import React, { useState } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { setZscores, setComponents, setAssetType, setGene } from \"./assetSlice\";\nimport { setVisible } from \"../infoModal/infoSlice\";\nimport '../../main.css';\nimport { nanoid } from \"@reduxjs/toolkit\";\n\nexport const AssetChooser = () => {\n    const options = useSelector(state => state.assets)\n    const [geneSelected, setGeneSelected] = useState(\"IL7R\")\n    const [dimmed, setDimmed] = useState(false)\n    const dispatch = useDispatch()\n\n    const allowedGenes = [\"AIF1\", \"ANK3\", \"AOAH\", \"ATG7\", \"ATP2B1\", \"BACH1\",\n        \"CD7\", \"CD74\", \"CLEC12A\", \"CTSS\", \"DLEU2\",  \"DUSP6\", \"EVI5\", \"FGL2\",\n        \"FOSB\", \"GPCPD1\", \"GSAP\", \"HLA-DMA\", \"HLA-DMB\", \"HLA-DQB1\", \"HLA-DRB1\",\n        \"IL7R\", \"JAZF1\", \"JUN\", \"LEF1\", \"LTB\", \"LYST\", \"MARCH1\", \"MEGF9\", \"MTSS1\",\n        \"MXD1\", \"MYADM\", \"NEAT1\",  \"NUMB\", \"PARP14\", \"POU2F2\", \"PRKCH\", \"PSTPIP2\",\n        \"QKI\", \"RGS2\", \"RPL11\", \"RPL13A\", \"RPS18\", \"SAT1\", \"SCLT1\", \"PSAP\",\n        \"SIPA1L1\", \"SKAP1\", \"SLFN12L\", \"SRGN\", \"TBXAS1\", \"TET3\"]\n\n    const onCompTypeClicked = (compType) => {\n        if (compType !== \"PC1 and PC2\") {\n            dispatch(setZscores(false))\n        }\n        dispatch(setComponents(compType))\n    }\n\n    const onPlotTypeClicked = (plotType) => {\n        dispatch(setAssetType(plotType))\n    }\n\n    const onGeneClicked = () => {\n        if (allowedGenes.includes(geneSelected)) { dispatch(setGene(geneSelected)) }\n        else { dispatch(setGene(\"ERROR\")) }\n    }\n\n    const allGenesClicked = () => {\n        setDimmed(true)\n        dispatch(setGene(\"all\"))\n    }\n\n    const onZscoresClicked = () => {\n        dispatch(setZscores(!options.zscores))\n    }\n\n    const infoClicked = () => { dispatch(setVisible(true)) }\n\n    const componentButtons = [\"PC1 and PC2\", \"PC2 and PC3\", \"PC3 and PC4\"].map(compType => (\n        <button className={options.components === compType ? \"button\" : \"muted-button\"}\n                key={nanoid()} onClick={() => onCompTypeClicked(compType)} style={{margin: \"3px\", padding: \"8px\"}}>{compType}</button>\n    ))\n\n    const plotButtons = [\"All Cell Types\", \"CD4+ T Cells\", \"CD8+ T Cells\", \"Macrophages & Monocytes\", \"B Cells\"].map(plotType => (\n        <button className={options.assetType === plotType ? \"button\" : \"muted-button\"} key={nanoid()}\n                onClick={() => onPlotTypeClicked(plotType)} style={{margin: \"3px\", padding: \"8px\"}}>{plotType}</button>\n    ))\n\n    return (\n        <>\n            <div className=\"flex-row\" style={{width: \"100%\", marginTop: \"0.5rem\", marginLeft: \"0.5rem\"}}>\n                {componentButtons}\n                <div style={{margin: \"3px\", padding: \"2px\"}}></div>\n                <div style={{margin: \"3px\", borderLeft: \"2px solid lightgrey\"}}></div>\n                <div style={{margin: \"3px\", padding: \"2px\"}}></div>\n                <button className={options.zscores ? \"button\" : \"muted-button\"} disabled={options.components !== \"PC1 and PC2\"}\n                        onClick={onZscoresClicked} style={{margin: \"3px\", padding: \"8px\", opacity: options.components === \"PC1 and PC2\" ? 1 : 0.5}}>Z-Scores</button>\n                <div style={{margin: \"3px\", padding: \"2px\"}}></div>\n                <div style={{margin: \"3px\", borderLeft: \"2px solid lightgrey\"}}></div>\n                <div style={{margin: \"3px\", padding: \"2px\"}}></div>\n                {plotButtons}\n                <button className=\"round-button\" onClick={infoClicked}\n                        style={{borderColor: \"mediumpurple\", backgroundColor: \"mediumpurple\", margin: \"3px\", padding: \"12px\", marginLeft: \"6px\"}}>Figure Info</button>\n            </div>\n            <div className=\"flex-row\" style={{width: \"100%\", marginTop: \"0.5rem\", marginLeft: \"0.5rem\"}}>\n                <button className={options.gene === \"all\" ? \"button\" : \"muted-button\"} onClick={allGenesClicked} disabled={options.assetType === \"Contact Plots\" || options.assetType === \"Coefficients (all) & Significance\"}\n                        style={options.assetType === \"Contact Plots\" || options.assetType === \"Coefficients (all) & Significance\" ? {backgroundColor: \"lightcoral\", borderColor: \"lightcoral\", marginRight: \"10px\", marginTop: \"0.2rem\", opacity: \"0.5\"} : {marginRight: \"10px\", marginTop: \"0.2rem\"}}>All Genes</button>\n                <input style={{color: \"antiquewhite\", flexBasis: \"50%\", marginLeft: \"0.2rem\", marginTop: \"0.2rem\", opacity: dimmed ? \"0.5\" : \"1\"}}\n                       placeholder={geneSelected} type=\"text\" onChange={(e) => { setDimmed(false); setGeneSelected(e.target.value) }}/>\n                <button style={{marginLeft: \"10px\", marginTop: \"0.2rem\", opacity: dimmed ? \"0.5\" : \"1\"}} onClick={onGeneClicked}>Choose Gene</button>\n            </div>\n        </>\n    )\n}","import React from 'react';\nimport { useSelector} from 'react-redux';\nimport { nanoid } from '@reduxjs/toolkit';\nimport '../../main.css';\n\nexport const PlotViewer = () => {\n    const options = useSelector(state => state.assets)\n\n    const allowedGenes = [\"AIF1\", \"ANK3\", \"AOAH\", \"ATG7\", \"ATP2B1\", \"BACH1\",\n        \"CD7\", \"CD74\", \"CLEC12A\", \"CTSS\", \"DLEU2\",  \"DUSP6\", \"EVI5\", \"FGL2\",\n        \"FOSB\", \"GPCPD1\", \"GSAP\", \"HLA-DMA\", \"HLA-DMB\", \"HLA-DQB1\", \"HLA-DRB1\",\n        \"IL7R\", \"JAZF1\", \"JUN\", \"LEF1\", \"LTB\", \"LYST\", \"MARCH1\", \"MEGF9\", \"MTSS1\",\n        \"MXD1\", \"MYADM\", \"NEAT1\",  \"NUMB\", \"PARP14\", \"POU2F2\", \"PRKCH\", \"PSTPIP2\",\n        \"QKI\", \"RGS2\", \"RPL11\", \"RPL13A\", \"RPS18\", \"SAT1\", \"SCLT1\", \"PSAP\",\n        \"SIPA1L1\", \"SKAP1\", \"SLFN12L\", \"SRGN\", \"TBXAS1\", \"TET3\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"]\n\n    const geneTableRows = []\n\n    for (let i = 0; i < 51; i += 10) {\n        const row = <tr key={nanoid()}>\n            {allowedGenes.slice(i, i+10).map(geneName => {\n                return (<td key={nanoid()} style={{fontSize: \"1.3rem\", textAlign: \"center\"}}>{geneName}</td>)\n            })}\n        </tr>\n        geneTableRows.push(row)\n    }\n\n    let path = options.zscores ? \"genesZ\" : \"genes\"\n    if (options.assetType === \"CD4+ T Cells\") { path += \"CD4\" }\n    if (options.assetType === \"CD8+ T Cells\") { path += \"CD8\" }\n    if (options.assetType === \"Macrophages & Monocytes\") { path += \"MacMon\" }\n    if (options.assetType === \"B Cells\") { path += \"B\" }\n    if (options.components === \"PC1 and PC2\") { path += \"12\" }\n    if (options.components === \"PC2 and PC3\") { path += \"23\" }\n    if (options.components === \"PC3 and PC4\") { path += \"34\" }\n\n    return (\n        <>\n            { options.gene !== \"ERROR\" &&\n            <div className=\"flex-row\" style={{width: \"100%\", marginTop: \"0.5rem\", marginLeft: \"0.5rem\"}}>\n                <img style={{width: \"70%\", height: \"70%\", margin: \"10px\", borderRadius: \"10px\"}}\n                     src={process.env.PUBLIC_URL + \"/images/\" + path + \"/\" + options.gene + \".jpg\"} alt=\"\"/>\n            </div>\n            }\n            { options.gene === \"ERROR\" &&\n            <div style={{display: \"flex\", flexDirection: \"column\", justifyContent: \"center\"}}>\n                <h3 style={{color: \"antiquewhite\"}}>That gene isn't available — perhaps it was mistyped?</h3>\n                <h5 style={{color: \"antiquewhite\"}}>Available Genes</h5>\n                <table style={{width: \"94%\", marginLeft: \"3%\", marginRight: \"3%\"}}>\n                    <thead><tr><th></th><th></th><th></th><th></th><th></th><th></th><th></th><th></th><th></th><th></th></tr></thead>\n                    <tbody>{geneTableRows}</tbody>\n                    <tfoot><tr><th></th><th></th><th></th><th></th><th></th><th></th><th></th><th></th><th></th><th></th></tr></tfoot>\n                </table>\n            </div>\n            }\n        </>\n    )\n}\n","import './App.css';\nimport './main.css';\nimport { AssetChooser } from \"./features/assetChooser/AssetChooser\";\nimport { PlotViewer } from \"./features/plotViewer/PlotViewer\";\nimport React from \"react\";\nimport { useSelector, useDispatch } from 'react-redux';\nimport { setVisible } from \"./features/infoModal/infoSlice\";\n\nfunction App() {\n\n    const dispatch = useDispatch()\n    const info = useSelector(state => state.info.visible)\n\n    let explanation = \"These plots display the results of principal component analysis on the raw counts of the promoter capture Hi-C experiment\" +\n        \"(or the Z-scores generated from those counts, if that option is selected). Each plot shows the specified components on the two axes, \" +\n        \"and if a specific cell type group is selected, data from those cell types are highlighted. Also, gene-specific data can be viewed. The plots\" +\n        \"include data from three replicates for each cell type.\"\n\n    return (\n        <>\n            <div className=\"App\" style={info ? {transition: \"filter 0.3s ease-out\", filter: \"blur(10px) opacity(50%) brightness(50%)\"} : {transition: \"filter 0.3s ease-in\"}}>\n                <AssetChooser />\n                <PlotViewer />\n            </div>\n            { info &&\n                <div style={{borderRadius: \"15px\", position: \"absolute\", top: \"25vh\", left: \"25vw\",\n                    width: \"50%\", backgroundColor: \"gray\", textAlign: \"center\"}}>\n                    <h3 style={{color: \"antiquewhite\"}}>PCA Figure Info</h3>\n                    <p style={{margin: \"3%\"}}>{explanation}</p>\n                    <button onClick={() => dispatch(setVisible(false))} style={{marginBottom: \"3%\"}}>Close</button>\n                </div>\n            }\n        </>\n    );\n}\n\nexport default App;","import { configureStore } from '@reduxjs/toolkit';\nimport assetReducer from '../features/assetChooser/assetSlice';\nimport infoReducer from '../features/infoModal/infoSlice';\n\nexport const store = configureStore({\n    reducer: {\n        assets: assetReducer,\n        info: infoReducer\n    },\n});","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport { Provider } from 'react-redux';\nimport { store } from './app/store';\n\nReactDOM.render(\n    <React.StrictMode>\n        <Provider store={store}>\n            <App />\n        </Provider>\n    </React.StrictMode>,\n    document.getElementById('root')\n);\n"],"sourceRoot":""}